<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
    <!--1：定义哪些链接可以放行-->
    <!--
        2：定义哪些链接不可以放行，即需要有角色、权限才可以放行
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->

    <!--1：定义哪些链接可以放行-->
    <!--security:http：配置url
            security="none"：没有权限访问（不需要登录、不需要角色、权限，也可以访问的资源）
            pattern="/pages/add.html"：指定的url地址
    -->
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/image/**"></security:http>
    <security:http security="none" pattern="/login.html"></security:http>

    <security:http auto-config="true" use-expressions="true">

<!--    只要认证通过就可以访问    -->
    <security:intercept-url pattern="/**" access="isAuthenticated()"/>
<!--   登录配置表单登信息配置

  form-login：定义表单登录信息
            login-page="/login.html"：表示指定登录页面
            username-parameter="username"：使用登录名的名称，默认值是username
            password-parameter="password"：使用登录名的密码，默认值是password
            login-processing-url="/login.do"：表示登录的url地址
            default-target-url="/index.html"：登录成功后的url地址
            authentication-failure-url="/login.html"：认证失败后跳转的url地址，失败后指定/login.html
-->
        <security:form-login

         login-page="/login.html"
         username-parameter="username"
         password-parameter="password"
         login-processing-url="/login.do"
         authentication-failure-url="/login.html"
         default-target-url="/index.html"
        />
        <!--关闭盗链安全请求-->
        <security:csrf disabled="true" />
    </security:http>
    <!--
        3：认证管理，定义登录账号名和密码，并授予访问的角色、权限
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider>
            <!--
                user-service：用于获取用户信息，提供给authentication-provider进行认证
            -->
            <security:user-service>
                <!--
                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
              {noop}：表示当前使用的密码为明文
                -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>

        <!--登录配置：表单登录页面的信息配置
           login-page="/login.html"：指定登录页面
           username-parameter="username"：指定登录页面的用户名的参数名称（默认：username）
           password-parameter="password"：指定登录页面的密码的参数名称（默认：password）
           login-processing-url="/login.do"：登录页面访问登录的url地址
           default-target-url="/index.html"：登录成功后访问的成功页面
           authentication-failure-url="/login.html"：登录失败后跳转的页面
           always-use-default-target="true"：是否始终跳转到登录成功页面（/index.html）
       -->

    </security:authentication-manager>




</beans>